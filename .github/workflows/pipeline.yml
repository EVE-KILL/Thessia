name: Build and deploy Thessia

on:
    push:
        branches:
            - main
    workflow_dispatch:

permissions:
    contents: read
    packages: write
    security-events: write
    id-token: write

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: eve-kill/thessia
    # Create a consistent tag using the short SHA
    IMAGE_TAG: sha-${{ github.sha }}

jobs:
    build:
        name: Build and push Docker image
        runs-on: ubuntu-latest
        concurrency:
            group: ${{ github.workflow }}-${{ github.ref }}
            cancel-in-progress: true
        steps:
            - name: Checkout repository
              uses: actions/checkout@v5

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Docker registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata for Docker
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=sha,format=short
                      type=ref,event=branch
                      latest

            - name: Build and push Docker image
              uses: docker/build-push-action@v6
              with:
                  context: .
                  push: true
                  #platforms: linux/amd64,linux/arm64
                  platforms: linux/amd64
                  tags: |
                      ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
                      ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

    deploy:
        name: Deploy application
        needs: build
        runs-on: ubuntu-latest
        concurrency:
            group: ${{ github.workflow }}-${{ github.ref }}
            cancel-in-progress: true
        permissions:
            contents: read
            packages: write
            id-token: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v5

            - name: Tailscale
              uses: tailscale/github-action@v3
              with:
                  oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
                  oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
                  tags: tag:ci

            - name: Set up kubectl
              run: |
                  tailscale configure kubeconfig tailscale-operator

            - name: Deploy helm chart
              run: |
                  helm upgrade --install eve-kill -n eve-kill chart/ \
                      --set global.image.tag=${{ env.IMAGE_TAG }} \
                      --set global.env.esiUrl=${{ secrets.ESI_URL }} \
                      --set global.env.redisqId=${{ secrets.REDISQ_ID }} \
                      --set global.env.sensitive.eveClientId=${{ secrets.EVE_CLIENT_ID }} \
                      --set global.env.sensitive.eveClientSecret=${{ secrets.EVE_CLIENT_SECRET }} \
                      --set global.env.sensitive.eveClientRedirect=${{ secrets.EVE_CLIENT_REDIRECT }} \
                      --set global.env.sensitive.backendDiscordUrl=${{ secrets.BACKEND_DISCORD_URL }} \
                      --set global.env.sensitive.discordNewComment=${{ secrets.DISCORD_NEW_COMMENT }} \
                      --set global.env.sensitive.discordReportComment=${{ secrets.DISCORD_REPORT_COMMENT }} \
                      --set global.env.sensitive.openAIAPIKey=${{ secrets.OPENAI_API_KEY }} \
                      --set global.env.sensitive.tenorAPIKey=${{ secrets.TENOR_API_KEY }} \
                      --set global.env.sensitive.cloudflareAnalyticsToken=${{ secrets.CLOUDFLARE_ANALYTICS_TOKEN }}

    purge-cloudflare-cache:
        runs-on: ubuntu-latest
        needs: deploy
        concurrency:
            group: ${{ github.workflow }}-${{ github.ref }}
            cancel-in-progress: true
        permissions:
            contents: read
            packages: write
            id-token: write

        steps:
            - name: Purge Cloudflare Cache
              uses: jakejarvis/cloudflare-purge-action@v0.3.0
              env:
                  CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE_ID }}
                  CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_CACHE_PURGE_TOKEN }}

    scan:
        name: Vulnerability Scanning
        needs: build
        runs-on: ubuntu-latest
        continue-on-error: true
        steps:
            - name: Log in to Docker registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
                  format: "sarif"
                  output: "trivy-results.sarif"
                  severity: "CRITICAL,HIGH"

            - name: Upload Trivy scan results to GitHub Security tab
              uses: github/codeql-action/upload-sarif@v3
              with:
                  sarif_file: "trivy-results.sarif"

    sonarqube:
        name: SonarQube Scan
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v5
              with:
                  fetch-depth: 0

            - uses: SonarSource/sonarqube-scan-action@v6
              env:
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
